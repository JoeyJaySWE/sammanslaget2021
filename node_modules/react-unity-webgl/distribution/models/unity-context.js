"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnityContext = void 0;
// TODO remove from dir
/**
 * The Unity Context.
 */
var UnityContext = /** @class */ (function () {
    /**
     * Creates a new instance of the Unity context model.
     * @param {IUnityConfig} unityConfig The Unity config used to build the player.
     */
    function UnityContext(unityConfig) {
        this.unityConfig = unityConfig;
        /**
         * A list of the UnityEvents binded to this unityContext.
         * @private
         * @type {IUnityEvent[]}
         */
        this.unityEvents = [];
        if (typeof window !== "undefined" &&
            typeof window.ReactUnityWebGL === "undefined")
            window.ReactUnityWebGL = {};
    }
    /**
     * Sets the reference of the UnityInstance.
     * @public
     * @param {UnityInstance} unityInstance the target unityInstance.
     */
    UnityContext.prototype.setUnityInstance = function (unityInstance) {
        this.unityInstance = unityInstance;
    };
    /**
     * Quits the Unity Instance and clears it from memory.
     * @public
     */
    UnityContext.prototype.quitUnityInstance = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof this.unityInstance !== "undefined")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.unityInstance.Quit()];
                    case 1:
                        _a.sent();
                        this.dispatchEventListener("quitted");
                        this.unityInstance = undefined;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sends a message to the UnityInstance to invoke a public method.
     * @public
     * @param {string} gameObjectName the name of the game object in your Unity scene.
     * @param {string} methodName the name of the public method on the game object.
     * @param {string | number | boolean} parameter an optional method parameter.
     */
    UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {
        if (typeof this.unityInstance !== "undefined")
            if (typeof parameter === "undefined")
                this.unityInstance.SendMessage(gameObjectName, methodName);
            else
                this.unityInstance.SendMessage(gameObjectName, methodName, parameter);
    };
    /**
     * Registers an event listener for the Unity player. These can be
     * system events like when the player is initialized or loader and
     * your custom events from Unity.
     * @public
     * @param {string} eventName the event's name
     * @param {Function} eventListener the event's function
     */
    UnityContext.prototype.on = function (eventName, eventListener) {
        this.unityEvents.push({ eventName: eventName, eventCallback: eventListener });
        if (typeof window !== "undefined")
            window.ReactUnityWebGL[eventName] = function () {
                var parameters = [];
                for (var _a = 0; _a < arguments.length; _a++) {
                    parameters[_a] = arguments[_a];
                }
                return eventListener.apply(void 0, parameters);
            };
    };
    /**
     * Removes all the Event Listeners with a specific Event Name.
     * @public
     * @param {string} eventName the event's name
     * @example unityContext.removeEventListener("progress");
     */
    UnityContext.prototype.removeEventListener = function (eventName) {
        // TODO refactor to "off"?
        for (var _i = 0; _i < this.unityEvents.length; _i++)
            if (this.unityEvents[_i].eventName === eventName)
                this.unityEvents.splice(_i, 1);
        delete window.ReactUnityWebGL[eventName];
    };
    /**
     * Removes all the Event Listeners.
     * @public
     * @example unityContext.removeAllEventListeners();
     */
    UnityContext.prototype.removeAllEventListeners = function () {
        // TODO refactor to "off"?
        for (var _i = 0; _i < this.unityEvents.length; _i++)
            delete window.ReactUnityWebGL[this.unityEvents[_i].eventName];
        this.unityEvents = [];
    };
    /**
     * Dispatches an event listener that has been registered using the on method.
     * @public
     * @param {string} eventName the event's name
     * @param {any} eventValue the event's value
     * @example unityContext.dispatchEventListener("gameOver", 180);
     */
    UnityContext.prototype.dispatchEventListener = function (eventName, eventValue) {
        for (var _a = 0, _b = this.unityEvents; _a < _b.length; _a++) {
            var _unityEvent = _b[_a];
            if (_unityEvent.eventName === eventName)
                _unityEvent.eventCallback(eventValue);
        }
    };
    /**
     * Enables or disabled the Fullscreen mode of the Unity Instance.
     * @public
     * @param {boolean} enabled
     */
    UnityContext.prototype.setFullscreen = function (enabled) {
        if (typeof this.unityInstance !== "undefined")
            this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);
    };
    return UnityContext;
}());
exports.UnityContext = UnityContext;
//# sourceMappingURL=unity-context.js.map