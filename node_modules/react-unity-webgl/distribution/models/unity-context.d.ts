import { IUnityConfig } from "../interfaces/unity-config";
import { IUnityContextEventMap } from "../interfaces/unity-context-event-map";
/**
 * The Unity Context.
 */
export declare class UnityContext {
    unityConfig: IUnityConfig;
    /**
     * A reference to the Unity Instance binded to this unityContext.
     * @private
     * @type {UnityInstance}
     */
    private unityInstance?;
    /**
     * A list of the UnityEvents binded to this unityContext.
     * @private
     * @type {IUnityEvent[]}
     */
    private unityEvents;
    /**
     * Creates a new instance of the Unity context model.
     * @param {IUnityConfig} unityConfig The Unity config used to build the player.
     */
    constructor(unityConfig: IUnityConfig);
    /**
     * Sets the reference of the UnityInstance.
     * @public
     * @param {UnityInstance} unityInstance the target unityInstance.
     */
    setUnityInstance(unityInstance: UnityInstance): void;
    /**
     * Quits the Unity Instance and clears it from memory.
     * @public
     */
    quitUnityInstance(): Promise<void>;
    /**
     * Sends a message to the UnityInstance to invoke a public method.
     * @public
     * @param {string} gameObjectName the name of the game object in your Unity scene.
     * @param {string} methodName the name of the public method on the game object.
     * @param {string | number | boolean} parameter an optional method parameter.
     */
    send(gameObjectName: string, methodName: string, parameter?: string | number | boolean): void;
    /**
     * Registers an event listener for the Unity player. These can be
     * system events like when the player is initialized or loader and
     * your custom events from Unity.
     * @public
     * @param {string} eventName the event's name
     * @param {Function} eventListener the event's function
     */
    on<MapKey extends keyof IUnityContextEventMap | (string & {})>(eventName: keyof IUnityContextEventMap | (MapKey & {}), eventListener: (...parameters: MapKey extends keyof IUnityContextEventMap ? IUnityContextEventMap[MapKey] : any) => void): void;
    /**
     * Removes all the Event Listeners with a specific Event Name.
     * @public
     * @param {string} eventName the event's name
     * @example unityContext.removeEventListener("progress");
     */
    removeEventListener(eventName: string): void;
    /**
     * Removes all the Event Listeners.
     * @public
     * @example unityContext.removeAllEventListeners();
     */
    removeAllEventListeners(): void;
    /**
     * Dispatches an event listener that has been registered using the on method.
     * @public
     * @param {string} eventName the event's name
     * @param {any} eventValue the event's value
     * @example unityContext.dispatchEventListener("gameOver", 180);
     */
    dispatchEventListener(eventName: string, eventValue?: any): void;
    /**
     * Enables or disabled the Fullscreen mode of the Unity Instance.
     * @public
     * @param {boolean} enabled
     */
    setFullscreen(enabled: boolean): void;
}
//# sourceMappingURL=unity-context.d.ts.map